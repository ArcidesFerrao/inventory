generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  hashedPassword String?
  ActivityLog    ActivityLog[]
  products       Product[]
  purchases      Purchase[]
  sales          Sale[]
}

model Product {
  id            String          @id @default(cuid())
  name          String
  description   String?
  stock         Int?
  price         Float?
  cost          Float?
  status        ProductStatus   @default(ACTIVE)
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  categoryId    String?
  unitId        String?
  quantity      Int
  type          ProductType     @default(STOCK)
  Category      Category?       @relation(fields: [categoryId], references: [id])
  Unit          Unit?           @relation(fields: [unitId], references: [id])
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  PurchaseItem  PurchaseItem[]
  MenuItems     RecipeItem[]    @relation("MenuItems")
  RecipeItem    RecipeItem[]
  StockItems    RecipeItem[]    @relation("StockItems")
  SaleItem      SaleItem[]
  stockMovement StockMovement[]
}

model RecipeItem {
  id        String   @id @default(cuid())
  menuId    String
  stockId   String
  quantity  Int
  productId String
  menu      Product  @relation("MenuItems", fields: [menuId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
  stock     Product  @relation("StockItems", fields: [stockId], references: [id], onDelete: Cascade)
}

model Sale {
  id          String     @id @default(uuid())
  date        DateTime   @default(now())
  total       Float
  cogs        Float      @default(0)
  paymentType String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  SaleItem    SaleItem[]
}

model SaleItem {
  id        String  @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model Purchase {
  id           String         @id @default(uuid())
  date         DateTime       @default(now())
  total        Float
  supplier     String?
  paymentType  String
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  PurchaseItem PurchaseItem[]
}

model PurchaseItem {
  id         String   @id @default(uuid())
  purchaseId String
  productId  String
  stock      Int
  price      Float
  quantity   Int      @default(1)
  unitCost   Float    @default(0)
  totalCost  Float    @default(0)
  product    Product  @relation(fields: [productId], references: [id])
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  actionType  String
  entityType  String
  entityId    String?
  description String
  details     Json?
  ipAddress   String?
  device      String?
  severity    String   @default("INFO")
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([timestamp])
}

model StockMovement {
  id          String   @id @default(cuid())
  productId   String
  changeType  String
  quantity    Int
  relatedIt   String?
  description String?
  timestamp   DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Unit {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
}

enum ProductStatus {
  ACTIVE
  DRAFT
  OUT_OF_STOCK
}

enum ProductType {
  SERVICE
  STOCK
}
