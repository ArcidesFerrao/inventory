generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  hashedPassword    String?
  ActivityLog       ActivityLog[]
  products          Product[]
  purchases         Purchase[]
  sales             Sale[]
  supplierCustomers SupplierCustomer[]
  orders            Order[]
}

model Product {
  id            String          @id @default(cuid())
  name          String
  description   String?
  stock         Int?
  price         Float?
  cost          Float?
  status        ProductStatus   @default(ACTIVE)
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  categoryId    String?
  unitId        String?
  quantity      Int
  type          ProductType     @default(STOCK)
  Category      Category?       @relation(fields: [categoryId], references: [id])
  Unit          Unit?           @relation(fields: [unitId], references: [id])
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  PurchaseItem  PurchaseItem[]
  MenuItems     RecipeItem[]    @relation("MenuItems")
  RecipeItem    RecipeItem[]
  StockItems    RecipeItem[]    @relation("StockItems")
  SaleItem      SaleItem[]
  stockMovement StockMovement[]
}

model RecipeItem {
  id        String   @id @default(cuid())
  menuId    String
  stockId   String
  quantity  Int
  productId String
  menu      Product  @relation("MenuItems", fields: [menuId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
  stock     Product  @relation("StockItems", fields: [stockId], references: [id], onDelete: Cascade)
}

model Sale {
  id          String     @id @default(uuid())
  date        DateTime   @default(now())
  total       Float
  cogs        Float      @default(0)
  paymentType String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  SaleItem    SaleItem[]
}

model SaleItem {
  id        String  @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model Purchase {
  id                 String            @id @default(uuid())
  date               DateTime          @default(now())
  total              Float
  paymentType        String
  userId             String
  supplierId         String?
  supplierCustomerId String?
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  supplier           Supplier?         @relation(fields: [supplierId], references: [id])
  PurchaseItem       PurchaseItem[]
  supplierCustomer   SupplierCustomer? @relation(fields: [supplierCustomerId], references: [id])
}

model PurchaseItem {
  id                String           @id @default(uuid())
  purchaseId        String
  productId         String
  supplierProductId String?
  stock             Int
  price             Float
  quantity          Int              @default(1)
  unitCost          Float            @default(0)
  totalCost         Float            @default(0)
  product           Product          @relation(fields: [productId], references: [id])
  purchase          Purchase         @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  supplierProduct   SupplierProduct? @relation(fields: [supplierProductId], references: [id])
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  actionType  String
  entityType  String
  entityId    String?
  description String
  details     Json?
  ipAddress   String?
  device      String?
  severity    String   @default("INFO")
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([timestamp])
}

model StockMovement {
  id          String   @id @default(cuid())
  productId   String
  changeType  String
  quantity    Int
  relatedIt   String?
  description String?
  timestamp   DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Unit {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String?
  products         Product[]
  supplierProducts SupplierProduct[]
}

model Supplier {
  id            String             @id @default(cuid())
  name          String
  email         String?            @unique
  phone         String?            @unique
  address       String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  products      SupplierProduct[]
  purchases     Purchase[]
  customers     SupplierCustomer[]
  SupplierOrder SupplierOrder[]
}

model SupplierProduct {
  id          String  @id @default(cuid())
  name        String
  description String?
  unitQty     Int
  stock       Int?
  price       Float?
  cost        Float?
  unitId      String?
  Unit        Unit?   @relation(fields: [unitId], references: [id])

  status       ProductStatus  @default(ACTIVE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  supplierId   String
  supplier     Supplier       @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  PurchaseItem PurchaseItem[]
  OrderItem    OrderItem[]

  @@index([supplierId]) // list products per supplier
  @@index([status]) // filter by active/inactive
  @@index([name]) // search/autocomplete
  @@index([unitId])
}

model Order {
  id                  String            @id @default(cuid())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  requestedStartDate  DateTime
  requestedEndDate    DateTime
  notes               String?
  total               Float
  status              String
  paymentType         String
  supplierCustomerId  String?
  items               OrderItem[]
  confirmedDeliveries Delivery[]
  supplierCustomer    SupplierCustomer? @relation(fields: [supplierCustomerId], references: [id])
  User                User              @relation(fields: [userId], references: [id])
  userId              String
  supplierOrders      SupplierOrder[]

  @@index([userId])
  @@index([supplierCustomerId])
}

model SupplierOrder {
  id         String      @id @default(cuid())
  orderId    String
  supplierId String
  status     OrderStatus @default(PENDING)
  items      OrderItem[]
  order      Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  supplier   Supplier    @relation(fields: [supplierId], references: [id])

  @@unique([orderId, supplierId])
}

model OrderItem {
  id                 String            @id @default(cuid())
  supplierOrderId    String
  supplierProductId  String
  orderedQty         Int
  deliveredQty       Int
  price              Float
  product            SupplierProduct   @relation(fields: [supplierProductId], references: [id])
  supplierOrder      SupplierOrder     @relation(fields: [supplierOrderId], references: [id], onDelete: Cascade)
  deliveries         DeliveryItem[]
  SupplierCustomer   SupplierCustomer? @relation(fields: [supplierCustomerId], references: [id])
  supplierCustomerId String?
  Order              Order?            @relation(fields: [orderId], references: [id])
  orderId            String?
}

model SupplierCustomer {
  id         String      @id @default(cuid())
  name       String
  email      String?     @unique
  phone      String?     @unique
  address    String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  supplierId String
  userId     String
  items      OrderItem[]
  supplier   Supplier    @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases  Purchase[]
  Order      Order[]

  @@unique([supplierId, userId])
}

model Delivery {
  id            String         @id @default(cuid())
  orderId       String
  scheduledAt   DateTime
  deliveredAt   DateTime?
  notes         String?
  status        String
  accepted      Boolean?
  reason        String?
  rating        Int?
  deliveryItems DeliveryItem[]
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model DeliveryItem {
  id          String    @id @default(cuid())
  deliveryId  String
  orderItemId String
  quantity    Int
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  delivery    Delivery  @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
}

enum ProductStatus {
  ACTIVE
  DRAFT
  OUT_OF_STOCK
}

enum ProductType {
  SERVICE
  STOCK
  SUPPLY
}

enum OrderStatus {
  PENDING
  APPROVED
  PARTIAL
  REJECTED
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CASH
  CREDIT
  DEBIT
  MOBILE_MONEY
}
